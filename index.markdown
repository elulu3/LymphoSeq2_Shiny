---
layout: default
title: LymphoSeq2 Shiny
filename: 
---

# Uploading files to the Application

The application will accept inputs in the following formats:

1. TSV files from Adaptive Biotechnologies and 10x Genomics

2. A single RData file (.rda) that can be retrieved from the following two processes: 

    - The RData file was a result of the the files above in (1) processed through the Nextflow script [Link will be provided]. This Nextflow script runs the dataset through LymphoSeq2 functions and outputs the following tables into its own file and into a single file (that stores a single R object):
        - Standardized AIRR table (summary_table.rda)
        - Productive amino acid sequences table (amino_table.rda)
        - Productive nucleotide sequences table (nucleotide_table.rda)
        - Summary statistics table (summary_table.rda)

    - The RData file was downloaded from the Shiny application itself

**Upload Size Limitations** 

There are currently some limitations on how much data can be uploaded and processed. The current upper limit is around **5GB**. If the uploaded files exceeds this limit, the application will not load. However, there are some workarounds.

If the raw data exceeds 5GB, the data can be processed through the Nextflow script to be condensed and compressed, resulting in a smaller file size. Another alternative is to manually filter the raw data beforehand to analyze a more specific subset of the data. 

When uploading data with an RData file, it is possible that instead of uploading the single RData file with all of the summary tables of the dataset, one can upload the specific summary table that is used by a specific function for its analysis. Most of the functions only relies on one of the summary tables produced, so if a user knows what analyses they want to perform, it can be more efficient to upload smaller portions of data in this way. 

# Outputs

All outputs generated by the application are available for download.

For tabular outputs, download options are:

- .tsv
- .xlsx
- .RData**\*\***

For graphical outputs, download options are:

- .pdf
- .png**\***
- .RData**\*\***

**\******Png** downlaods are only available for outputs generated by plotly. For plotly outputs, there is a toolbar on the top right corner of the graphical output, where there is a small download button. Clicking on this button will result in the plot being downloaded as a .png file.*

**\*\******RData** downloads will include the following objects:*
- *The intended tabular or graphical output (data_output)*
- *The standardized AIRR-compliant data table of the uploaded dataset (study_table)*
- *Datatable of productive amino acid sequences (amino_table)*
- *Datatable of productive nucleotide sequences (nucleotide_table)*
- *Datatable of summary statistics (summary_table)*

*With this RData file, users can load data into their own R environment to explore the data further. The names in the parantheses above are names of the respective objects in the RData file / R object. Users can also re-upload this data into another instance of the Shiny application and eliminate the need for the application to recompute these summary data tables again on the same input data.*


# Functions

Below is a comprehensive list of functions available on the LymphoSeq2 Shiny Application.
The descriptions will be separated by tabs, as mirrored in the Shiny application.

Some things to note:

- Each section will contain:
    - The corresponding LymphoSeq2 function(s) that generates the output
    - Short summary of output
    - User input options (required and optional)
    - If uploading an RData file, the single summary table that is used
- The parameters of these functions will indicate what data is analyzed:
    - `study_table` is the AIRR-compliant datatable of the uploaded data
    - `productive_aa` is a datatable of productive amino acid sequences
    - `productive_nt` is a datatable of productive nucleotide sequences
- `repertoire_ids` is in reference to the repertoire identifier/name (this is sometimes the individual file name when each file holds one repertoire data)

### AIRR Data Table

    LymphoSeq2::readImmunoSeq(path = file_path, recursive = FALSE)

Imports .tsv files exported by the Adaptive Biotechnologies ImmunoSEQ analyzer, MiXCR, and 10x Genomics OR a single RData file with pre-processed summary tables of the aforementioned .tsv files (as output by the Nextflow script available on Github) and output them as an [Adaptive Immune Receptor Repertoire (AIRR)](https://docs.airr-community.org/en/latest/index.html) compliant data table.

User will need to upload appropriate files.

If uploading RData file: **study_table.rda**

### Explore Repertoire Overlap

#### 1. Data Table

    LymphoSeq2::commonSeqs(productive_aa, repertoire_ids)

Outputs a datatable of the common sequences in two or more repertoire ids. The frequencies of each will be recorded in the output table. 

Users will need to select at least two repertoire ids to do the analysis.

If uploading RData file: **amino_table.rda**

#### 2. Bar Chart

    LymphoSeq2::commonSeqsBar(productive_aa, repertoire_ids, color_sample, color_intersection, color, labels = "no")

Outputs an UpSetR bar plot showing the number of intersecting sequences across multiple repertoire_ids.

Users will need to select at least two repertoire ids to show intersections. This function is useful when more than 3 repertoire ids are being compared.

Users have the option to select a single repertoire id whose sequences will be colored in all repertoire ids they appear in. Users also have the option to select at least two repertoire ids whose intersections will be colored. 

If uploading RData file: **amino_table.rda**

#### 3. Plot

    LymphoSeq2::commonSeqsPlot(repertoire_id_1, repertoire_id_2, productive_aa, show = "common")

Ouputs a scatterplot of just the sequences in common between two samples/repertoire ids.

Users will need to select two repertoire ids to compare.

If uploading RData file: **amino_table.rda**

#### 4. Venn Diagram

    LymphoSeq2::commonSeqsVenn(repertoire_ids, productive_aa)

Outputs a venn diagram that compares the number of common sequences in two or three repertoire ids.

Users will need to select two or three repertoire ids to compare.

If uploading RData file: **amino_table.rda**

#### Paiwise Similarity

    similarity_matrix <- LymphoSeq2::scoringMatrix(productive_aa, mode)
    LymphoSeq2::pairwisePlot(similarity_matrix)

Outputs a heat map showing pairwise comparisons using the Bhattacharyya Coefficient, Similarity Score, Sorensen Index, or Percent Similarity Index calculation. 

User will need to select a mode to use for calculating pairwise similarity:
- Bhattacharyya
- Similarity
- Sorensen
- PSI

These modes will measure the amount of overlap between two samples. The output values will range from 0 to 1 where a 0 indiciates no shared sequence frequencies and a 1 indicates the sequence frequencies are identical. 

If uploading RData file: **amino_table.rda**

### Explore Productive Sequences

#### 1. Top Productive Sequences Table

    LymphoSeq2::topSeqs(productive_aa, top = 1)

Outputs a datatable of a selected number of top productive sequences.

Users will need to select the number of top productive sequences to subset by their frequencies.

If uploading RData file: **amino_table.rda**

#### 2. Top Productive Sequences Plot

    LymphoSeq2::topSeqsPlot(productive_aa, top = 10)

Outputs a cumulative frequency bar plot of a sepcified number of top sequences.

Users will need to select the number of top sequences ot be colored in the bar plot. 

All other, less frequent sequences are colored violet.

If uploading RData file: **amino_table.rda**

#### 3. Unique Productive Sequences Plot

#### 4. Unique Productive Sequences Table

    LymphoSeq2::uniqueSeqs(productive_aa, unique_type = "junction_aa")

Outputs a datatable of all productive sequences aggregated by duplicate_count.

If uploading RData file: **amino_table.rda**

### Explore Gene Frequencies

#### 1. Data Table

    LymphoSeq2::geneFreq(productive_nt, locus = "V|D|J", family = FALSE)

Outputs a data table of VDJ gene counts and frequencies.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

If uploading RData file: **nucleotide_table.rda**

#### 2. Heat Map

Outputs a heat map of gene frequencies. This function uses the data table output from `geneFreq`.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

If uploading RData file: **nucleotide_table.rda**

#### 3. Bar Chart

Outputs a stacked bar chart showing the distribution of gene frequencies for each repertoire id. This function uses the data table output from `geneFreq`.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

If uploading RData file: **nucleotide_table.rda**

### Explore Clonality

#### 1. Clonality

    LymphoSeq2::clonality(study_table)
    LymphoSeq2::clonalRelatedness(study_table, editDistance = 10)

Outputs a datatable giving the total number of sequences, number of unique productive sequences, number of genomes, clonality, Gini coefficient, and the frequency (\%) of the top productive sequence, simpson index, inverse simpson index, hill diversity index, chao diversity index, and kemp diversity index for each repertoire_id. Optionally, will also calculate the clonal relatedness for each repertoire_id. 

Users will need to select if they would like the clonal relatedness values calculated. If yes, users will need to select a value for `editDistance`, which is the minimum edit distance that the sequence must be less than or equal to. Edit distance is a way of quantifying how dissimilar two sequences are to one another by counting the minimum number of operations required to transform one sequence into the other. If no, clonal relatedness will not be calculated and added to the output table.

If uploading RData file: **study_table.rda**

#### 2. Clonality Statistics

#### 3. Clonality Plot

#### 4. Count Statistics

### Explore K-mers

#### 1. K-mer Counts

    LymphoSeq2::countKmer(study_table, k = 5, separate = TRUE)

Calculate the counts of k-mers in the nucleotide sequences output as a table.

If `separate = TRUE`, the counts will be separated by repertoire-ids, if `separate = FALSE`, cumulative counts will be calculated instead. 

Users will need to choose the k-mer length and if they would like to display the results separated by repertoire-ids.

If uploading RData file: **study_table.rda**

#### 2. K-mer Distribution

    LymphoSeq2::kmerPlot(countKmer_table, top = 10)

Plot top k-mer distributions by repertoire id. The input is the output of `countKmer` where `separate=TRUE`. The output of this function is a stacked bar chart.

Users will need to choose the k-mer length and how many most frequent k-mers to visualize.

If uploading RData file: **study_table.rda**

### Chord Diagram VDJ

    LymphoSeq2::chordDiagramVDJ(productive_nt, association = "VJ", colors = c("red", "blue")

Outputs a chord diagram showing VJ or DJ gene association.

User will need to choose a VDJ association (VJ or DJ) and whether to plot a certain number of top sequences (which the user specifies if yes) or plot all sequences.

If uploading RData file: **nucleotide_table.rda**

### Rarefaction Curve

    LymphoSeq2::plotRarefactionCurve(study_table)

For each repertoire id, plot rarefaction curves to estimate repertoire diversity. The method used to generate the rarefaction curve is derived from Chao et al. The output is a line plot.

If uploading RData file: **study_table.rda**

### Lorenz Curve

    LymphoSeq2::lorenzCurve(repertoire_ids, productive_aa)

Outputs a Lorenz curve derived from the frequency of the amino acid sequences.

If uploading RData file: **amino_table.rda**

### Clone Tracking
    clone_table <- LymphoSeq2::clone_tack(productive_aa, sample_list)
    LymphoSeq2::plotTrack(clone_table)

Outputs an alluvial plot tracking amino acid frequencies across multiple samples.

User will need to select repertoire_ids to visualize. Users will also have to make the selection to track all clones or to track the top number of clones, in which the user provides the number of clones to track. The default for this choice is tracking the top 50 clones. Users can also choose to track specific amino acid sequences. 

If uploading RData file: **amino_table.rda**

### Public TCRB Sequences

    LymphoSeq2::searchPublished(productive_aa)

Ths function searches for published T cell receptor beta CDR3 amino acid sequences with known antigen specificity in a list of data frames. The output is a datatable.

If uploading RData file: **amino_table.rda**

### Differential Abundance

    LymphoSeq2::differentialAbundance(productive_aa, repertoire_ids, abundance = "duplicate_count", type = "junction_a", q = 1, zero = 1, parallel = FALSE)

Outputs a datatable of the log2 transformed fold change, P value, and adjusted P value of using a Fisher exact test to calculate differential abdunance of each sequence in 
two samples.

Users will need to select two repertoire ids to analyze and the `q` and `zero` values for calculation. The `q` value is a numeric value between 0.0 and 1.0 indicating the threshold Holms adjusted P value (also knowns as the false discovery rate or q value) to subset the results with. Any sequences with a `q` value greater than this value will not be shown. The `zero` value is a numeric value to set all zero values to when calculating the log2 transformed fold change between samples 1 and 2.

If uploading RData file: **amino_table.rda**
