---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: default
---

# Providing Inputs to the App

The Shiny application will accept inputs in various formats:

1. .tsv files from ImmunoSEQ and 10x Genomics

2. A single RData file that can be retrieved from the following two processes: 

    1. The RData file is a result of the the files above in (1) processed through the Nextflow script. This Nextflow script will run the dataset through LymphoSeq2 functions and output the following tables into a single file: the standardized AIRR table, the productive sequences table, the nucleotide table, and the clonality table. 

    2. The RData file is downloaded from the Shiny application itself.

# Outputs

All outputs generated by the application are available for download.

For tabular outputs, download options are:

1. .tsv
2. .xlsx
3. .RData**\*\***

For graphical outputs, download options are:

1. .pdf
2. .png**\***
3. .RData**\*\***

**\****Png downlaods are only available for outputs generated by plotly. For plotly outputs, there is a toolbar on the top right corner of the graphical output, where there is a small download button. Clicking on this button will result in the plot being downloaded as a .png file.*

**\*\****RData downloads will include the following objects:


# Functions

Below is a comprehensive list of functions available on the LymphoSeq2 Shiny Application.
The descriptions will be separated by tabs, as reflected in the Shiny application.

### AIRR Data Table

    LymphoSeq2::readImmunoSeq(path = file_path, recursive = FALSE)

Imports .tsv files exported by the Adaptive Biotechnologies ImmunoSEQ analyzer, MiXCR, and 10x Genomics OR a single RData file with pre-processed summary tables of the aforementioned .tsv files (as output by the Nextflow script available on Github) and output them as a MiAIRR compliant data table.

User will need to upload files.

### Explore Common Productvie Sequences

#### 1. Data Table

    LymphoSeq2::commonSeqs(productive_aa, repertoire_ids)

Outputs a datatable of the common sequences in two or more repertoire ids. The frequencies of each will be recorded in the output table. 

Users will need to select at least two repertoire ids to do the analysis.

#### 2. Bar Chart



#### 3. Plot

    LymphoSeq2::commonSeqsPlot(repertoire_id_1, repertoire_id_2, productive_aa, show = "common")

Ouputs a scatterplot of just the sequences in common between two samples/repertoire ids.

Users will need to select two repertoire ids to compare.

#### 4. Venn Diagram

    LymphoSeq2::commonSeqsVenn(repertoire_ids, productive_aa)

Outputs a venn diagram that compares the number of common sequences in two or three repertoire ids.

Users will need to select two or three repertoire ids to compare.

### Explore Productive Sequences

#### 1. Top Productive Sequences Table

#### 2. Top Productive Sequences Plot

#### 3. Unique Productive Sequences Plot

#### 4. Unique Productive Sequences Table

### Explore Gene Frequencies

#### 1. Data Table

    LymphoSeq2::geneFreq(productive_nt, locus = "V|D|J", family = FALSE)

Outputs a data table of VDJ gene counts and frequencies.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

#### 2. Heat Map

Outputs a heat map of gene frequencies. This function uses the data table output from `geneFreq`.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

#### 3. Bar Chart

Outputs a stacked bar chart showing the distribution of gene frequencies for each repertoire id. This function uses the data table output from `geneFreq`.

Users will need to choose the locus (meaning, which VDJ genes to include in the output) and whether to display family names or gene names.

### Explore Clonality

#### 1. Clonality

    LymphoSeq2::clonality(study_table)

Outputs a datatable giving the total number of sequences, number of unique productive sequences, number of genomes, clonality, Gini coefficient, and the frequency (\%) of the top productive sequence, simpson index, inverse simpson index, hill diversity index, chao diversity index, and kemp diversity index for each repertoire_id.

#### 2. Clonal Relatedness

    LymphoSeq2::clonalRelatedness(study_table, editDistance = 10)

Calculates the clonal relatedness for each repertoire_id. The output is a datatable.

Users will need to select a value for `editDistance`, which is the minimum edit distance that the 
sequence must be less than or equal to. Edit distance is a way of quantifying how dissimilar two sequences are to one another by counting the minimum number of operations required to transform one sequence into the other.

#### 3. Clonality Statistics

#### 4. Clonality Plot

#### 5. Sequencing Counts

#### 6. Count Statistics

### Explore K-mers

#### 1. K-mer Counts

    LymphoSeq2::countKmer(study_table, k = 5, separate = TRUE)

Calculate the counts of k-mers in the nucleotide sequences output as a table.

If `separate = TRUE`, the counts will be separated by repertoire-ids, if `separate = FALSE`, cumulative counts will be calculated instead. 

Users will need to choose the k-mer length and if they would like to display the results separated by repertoire-ids.

#### 2. K-mer Distribution


    LymphoSeq2::kmerPlot(countKmer_table, top = 10)

Plot top k-mer distributions by repertoire id. The input is the output of `countKmer` where `separate=TRUE`. The output of this function is a stacked bar chart.

Users will need to choose the k-mer length and how many most frequent k-mers to visualize.

### Chord Diagram VDJ

    LymphoSeq2::chordDiagramVDJ(productive_nt, association = "VJ", colors = c("red", "blue")

Outputs a chord diagram showing VJ or DJ gene association.

User will need to choose a VDJ association (VJ or DJ) and whether to plot a certain number of top sequences (which the user specifies if yes) or plot all sequences.


### Rarefaction Curve

    LymphoSeq2::plotRarefactionCurve(study_table)

For each repertoire id, plot rarefaction curves to estimate repertoire diversity. The method used to generate the rarefaction curve is derived from Chao et al. The output is a line plot.

### Lorenz Curve

    LymphoSeq2::lorenzCurve(repertoire_ids, productive_aa)

Outputs a Lorenz curve derived from the frequency of the amino acid sequences.

### Clone Tracking

### Paiwise Similarity

### Public TCRB Sequences

    LymphoSeq2::searchPublished(productive_aa)

Ths function searches for published T cell receptor beta CDR3 amino acid sequences with known antigen specificity in a list of data frames. The output is a datatable.

### Differential Abundance

    LymphoSeq2::differentialAbundance(productive_aa, repertoire_ids, abundance = "duplicate_count", type = "junction_a", q = 1, zero = 1, parallel = FALSE)

This function uses a Fisher exact test to calculate differential abdunance of each sequence in 
two samples and reports the log2 transformed fold change, P value and adjusted P value. The output is a datatable. 

Users will need to select two repertoire ids to analyze and the `q` and `zero` values for calculation. The `q` value is a numeric value between 0.0 and 1.0 indicating the threshold Holms adjusted P value (also knowns as the false discovery rate or q value) to subset the results with. Any sequences with a `q` value greater than this value will not be shown. The `zero` value is a numeric value to set all zero values to when calculating the log2 transformed fold change between samples 1 and 2.
